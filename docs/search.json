[
  {
    "objectID": "hw6_quarto.html",
    "href": "hw6_quarto.html",
    "title": "Homework 6",
    "section": "",
    "text": "Task 1: Conceptual Questions\n1) What is the purpose of the lapply() function? What is the equivalent purrr function?\nlapply() is used to apply functions to lists. The equivalent of lapply() in the purrr package are the map() functions.\n2) Suppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want use lapply() to run the code cor(numeric_matrix, method = “kendall”)on each element of the list. Write code to do this below!\nnumeric_matrix &lt;- lapply(X = my_list, FUN = cor, method = “kendall”)\n3) What are two advantages of using purrr functions instead of the BaseR apply family?\npurrr gives us a cleaner/more consistent way to apply function to objects as well as helper functions to do so.\n4) What is a side-effect function?\nSide-effect functions return values without returning the modified output.\n5) Why can you name a variable sd in a function and not cause any issues with the sd function?\nA variable named “sd” in a function does not influence the sd function because it is generated by the function in a separate environment that disappears when the function finishes.\n\n\nTask 2: Writing R Functions\n1) Creating a RMSE function that takes in a vector of responses and a vector of predictions and outputs the RMSE\n\ngetRMSE &lt;- function(responses, predictions, ...) {\n  RMSE &lt;- sqrt(mean((responses - predictions)^2, ...)) #additional argument for the mean function\n  return(RMSE)\n}\n\n# Testing RMSE function\n\nresponses1 = c(35, 36, 43, 47, 48, 49, 46, 43, 42, 37, 36, 40)\npredictions1 = c(37, 37, 43, 46, 46, 50, 45, 44, 43, 41, 32, 42)\n\ngetRMSE(responses1, predictions1)\n\n[1] 2.041241\n\n\n2) Running the provided code to create some response and prediction values.\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nTesting RMSE function using provided data\n\ntest_rmse &lt;- getRMSE(resp, pred)\nprint(test_rmse)\n\n[1] 0.9581677\n\n\nReplacing two values with NA then rerunning getRMSE()\n\n# replacing two response values with NA\nresp[c(23, 68)] &lt;- NA_real_\n\n# getRMSE function without specifying missing values\nrmse_without &lt;- getRMSE(resp, pred)\nprint(rmse_without)\n\n[1] NA\n\n# getRMSE function with specifying missing values\nrmse_with &lt;- getRMSE(resp, pred, na.rm = TRUE)\n\nprint(rmse_with)\n\n[1] 0.9572009\n\n\n3) Function to get the Mean Absolute Deviation\n\n# Mean Absolute Deviation Function\ngetMAE &lt;- function(responses, predictions, ...) {\n  MAE &lt;- mean(abs(responses - predictions), ...) #additional argument for the mean function\n  return(MAE)\n}\n\n4. Running the provided code to create some response and prediction values.\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nTesting MAE Function\n\n# MAE Function\ntest_mae &lt;- getMAE(resp, pred)\nprint(test_mae)\n\n[1] 0.8155776\n\n\nReplacing two values with NA then rerunning getMAE()\n\n# replacing two response values with NA\nresp[c(21, 79)] &lt;- NA_real_\n\n# getMAE function without specifying missing values\nmae_without &lt;- getRMSE(resp, pred)\nprint(mae_without)\n\n[1] NA\n\n# getRMSE function with specifying missing values\nmae_with &lt;- getMAE(resp, pred, na.rm = TRUE)\n\nprint(mae_with)\n\n[1] 0.8273335\n\n\n5) Wrapper function that can be used to get either or both metrics returned with a single function call\n\n# Function that takes in two vectors, checks requirements, and applies helper functions\nwrapper_function &lt;- function(resp, pred, metrics = c(\"RMSE\", \"MAE\")) {\n  \n  if (!is.vector(resp) || !is.vector(pred))\n    stop(\"Both inputs need to be vectors\")\n  if (!is.atomic(resp) || !is.atomic(pred))\n    stop(\"Both inputs need to be atomic vectors\")\n  if (!is.numeric(resp) || !is.numeric(pred))\n    stop(\"Both inputs need to be numeric\")\n  \n  results &lt;- list()\n  \n  if (\"RMSE\" %in% metrics) {\n    results$RMSE &lt;- getRMSE(resp, pred, na.rm = TRUE)}\n  if (\"MAE\" %in% metrics) {\n    results$MAE &lt;- getMAE(resp, pred, na.rm = TRUE)}\n  \n  return(results)\n}\n\n6) Running the following code to create some response values and predictions.\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nTesting wrapper function using new data specifying RMSE metric\n\nwrapper &lt;- wrapper_function(resp, pred, metrics = c(\"RMSE\"))\nprint(wrapper)\n\n$RMSE\n[1] 0.9581677\n\n\nTesting wrapper function using new data specifying MAE metric\n\nwrapper &lt;- wrapper_function(resp, pred, metrics = c(\"MAE\"))\nprint(wrapper)\n\n$MAE\n[1] 0.8155776\n\n\nTesting wrapper function using new data specifying both metrics\n\nwrapper &lt;- wrapper_function(resp, pred, metrics = c(\"RMSE\", \"MAE\"))\nprint(wrapper)\n\n$RMSE\n[1] 0.9581677\n\n$MAE\n[1] 0.8155776\n\n\nRepeat with replacing two of the response values with missing values (NA_real_)\n\n# replacing two response values with NA\nresp[c(28, 62)] &lt;- NA_real_\n\n# Retesting function with missing response values\nwrapper &lt;- wrapper_function(resp, pred, metrics = c(\"RMSE\", \"MAE\"))\nprint(wrapper)\n\n$RMSE\n[1] 0.9591252\n\n$MAE\n[1] 0.8157525\n\n\nFinally, test your function by passing it incorrect data (i.e. a data frame or something else instead of vectors)\n\n# attemping to pass the iris data.frame through function\n\n# wrapper &lt;- wrapper_function(iris, pred, metrics = c(\"RMSE\", \"MAE\"))\n\n# did not execute, returned \"Both inputs need to be vectors\"\n# File wouldn't render with error\n\n\n\nTask 3: Querying an API and a Tidy-Style Function\n\n# Required libraries\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'tidyr' was built under R version 4.3.3\n\n\nWarning: package 'purrr' was built under R version 4.3.3\n\n\nWarning: package 'dplyr' was built under R version 4.3.3\n\n\nWarning: package 'stringr' was built under R version 4.3.3\n\n\nWarning: package 'forcats' was built under R version 4.3.3\n\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidyjson)\n\nWarning: package 'tidyjson' was built under R version 4.3.3\n\n\n\nAttaching package: 'tidyjson'\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nlibrary(jsonlite)\n\nWarning: package 'jsonlite' was built under R version 4.3.3\n\n\n\nAttaching package: 'jsonlite'\n\nThe following object is masked from 'package:tidyjson':\n\n    read_json\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n\nlibrary(purrr)\nlibrary(httr)\n\nWarning: package 'httr' was built under R version 4.3.3\n\n\n1) Set-up a connection with the given news API to return information about a topic of interest\n\napi_key &lt;- \"08daecb0bc2c4de6a6de13133cbe1217\"\n\ntopic &lt;- \"Articles that mentioned apple yesterday\"\n\nurl &lt;- \"https://newsapi.org/v2/everything?q=apple&from=2024-10-15&to=2024-10-15&sortBy=popularity&apiKey=08daecb0bc2c4de6a6de13133cbe1217\"\n\nparameters &lt;- list(from = 2024-10-00, \n                   sortBy = \"relevancy\")\n\napple_articles &lt;- GET(url, query = parameters)\n\nstr(apple_articles, max.level = 1)\n\nList of 10\n $ url        : chr \"https://newsapi.org/v2/everything?q=apple&from=2014&to=2024-10-15&sortBy=relevancy&apiKey=08daecb0bc2c4de6a6de13133cbe1217\"\n $ status_code: int 200\n $ headers    :List of 14\n  ..- attr(*, \"class\")= chr [1:2] \"insensitive\" \"list\"\n $ all_headers:List of 1\n $ cookies    :'data.frame':    0 obs. of  7 variables:\n $ content    : raw [1:71817] 7b 22 73 74 ...\n $ date       : POSIXct[1:1], format: \"2024-10-17 03:04:47\"\n $ times      : Named num [1:6] 0 0.193 0.217 0.246 0.497 ...\n  ..- attr(*, \"names\")= chr [1:6] \"redirect\" \"namelookup\" \"connect\" \"pretransfer\" ...\n $ request    :List of 7\n  ..- attr(*, \"class\")= chr \"request\"\n $ handle     :Class 'curl_handle' &lt;externalptr&gt; \n - attr(*, \"class\")= chr \"response\"\n\n\n2) Parse what is returned and find your way to the data frame that has the actual article information in it (check content). Use the pluck() function from purrr to grab the articles element. Note the first column should be a list column\n\nparsed &lt;- fromJSON(rawToChar(apple_articles$content))\n\narticle_df &lt;- pluck(parsed, \"articles\")\n\nparsed_apple_articles &lt;- as.tibble(article_df)\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n\nparsed_apple_articles\n\n# A tibble: 100 × 8\n   source$id $name author title description url   urlToImage publishedAt content\n   &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 &lt;NA&gt;      [Rem… &lt;NA&gt;   [Rem… [Removed]   http… &lt;NA&gt;       2024-09-18… \"[Remo…\n 2 &lt;NA&gt;      [Rem… &lt;NA&gt;   [Rem… [Removed]   http… &lt;NA&gt;       2024-10-01… \"[Remo…\n 3 the-verge The … Wes D… The … Apple is r… http… https://c… 2024-10-01… \"The n…\n 4 &lt;NA&gt;      Yaho… Anna … Appl… Employees … http… &lt;NA&gt;       2024-09-24… \"If yo…\n 5 &lt;NA&gt;      [Rem… &lt;NA&gt;   [Rem… [Removed]   http… &lt;NA&gt;       2024-09-16… \"[Remo…\n 6 wired     Wired Julia… Appl… Apple Inte… http… https://m… 2024-09-18… \"Creat…\n 7 the-verge The … Jay P… You’… iOS 18 let… http… https://c… 2024-09-18… \"Youll…\n 8 &lt;NA&gt;      [Rem… &lt;NA&gt;   [Rem… [Removed]   http… &lt;NA&gt;       2024-10-10… \"[Remo…\n 9 &lt;NA&gt;      [Rem… &lt;NA&gt;   [Rem… [Removed]   http… &lt;NA&gt;       2024-10-08… \"[Remo…\n10 &lt;NA&gt;      Yaho… Prana… Appl… Apple has … http… &lt;NA&gt;       2024-09-18… \"If yo…\n# ℹ 90 more rows\n\n\n3) Write a quick function that allows the user to easily query this API. The inputs to the function should be the title/subject to search for (string), a time period to search from (string - you’ll search from that time until the present), and an API key.\n\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(dplyr)\n\n# Used author instead of title/subject\n# Author seems like the better option as its shorter and multiple values that are the same\n\napi_query &lt;- function(author_name, from_date, api_key) {\n  \n  # api_key argument dynamically in the URL\n  url &lt;- paste0(\"https://newsapi.org/v2/everything?q=apple&from=2024-10-15&to=2024-10-15&sortBy=popularity&apiKey=08daecb0bc2c4de6a6de13133cbe1217\", api_key)\n  \n  # Set up query parameters\n  parameters &lt;- list(from = from_date, sortBy = \"relevancy\")\n  \n  # Make the GET request\n  request &lt;- GET(url, query = parameters)\n  \n  # Parse the API response\n parsed &lt;- fromJSON(rawToChar(apple_articles$content))\n\n article_df &lt;- pluck(parsed, \"articles\")\n\n parsed_apple_articles &lt;- as.tibble(article_df)\n  \n  # Filter the articles by title (exact match)\n  desired_article &lt;- filter(parsed_apple_articles, author == author_name)\n  \n  # Check if the desired article exists\n  if(nrow(desired_article) == 0) {\n    return(tibble(message = \"No article found with that title\"))\n  }\n  \n  # Select relevant information and return it as a tibble\n  article_info &lt;- desired_article |&gt;\n    select(author, title, description, publishedAt, url)\n  \n  return(article_info)\n}\n\nUsing function twice to grab some data!\n\n# Defining function argument\napi_key &lt;- \"08daecb0bc2c4de6a6de13133cbe1217\"\n\nauthor_name &lt;- c(\"Gizmodo Deals\", \"Jay Peters\", \"Kyle Barr\")\n\n# Testing function 1\narticles1 &lt;- api_query(author_name, \"2024-10-00\", api_key)\n\nWarning: There was 1 warning in `filter()`.\nℹ In argument: `author == author_name`.\nCaused by warning in `author == author_name`:\n! longer object length is not a multiple of shorter object length\n\nprint(articles1)\n\n# A tibble: 15 × 5\n   author        title                             description publishedAt url  \n   &lt;chr&gt;         &lt;chr&gt;                             &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;\n 1 Gizmodo Deals Amazon Targets the Best Laptop i… Apple hate… 2024-10-04… http…\n 2 Gizmodo Deals Forget Bose and Sonos, Amazon Sl… And to thi… 2024-10-03… http…\n 3 Gizmodo Deals One Day After Prime Day, Amazon … A 40% redu… 2024-10-10… http…\n 4 Gizmodo Deals Amazon Crushes iPad Prices by 40… A 40% redu… 2024-10-09… http…\n 5 Gizmodo Deals The MacBook Air is Selling At Ha… Now is the… 2024-10-05… http…\n 6 Gizmodo Deals iPad 9: Amazon Slashes Price Aga… Amazon is … 2024-10-07… http…\n 7 Jay Peters    Figma’s AI-powered app generator… Figma’s AI… 2024-09-24… http…\n 8 Kyle Barr     Apple Finally Releases iPadOS 18… M4 iPad Pr… 2024-10-04… http…\n 9 Gizmodo Deals Amazon is clearing out stock wit… Dive into … 2024-10-01… http…\n10 Kyle Barr     Apple Pulls iPadOS 18 From M4 iP… Some peopl… 2024-09-18… http…\n11 Gizmodo Deals Forget Black Friday: Apple’s M2 … Amazon is … 2024-09-29… http…\n12 Kyle Barr     The Next iPhone Could Arrive Ear… Plus, the … 2024-10-02… http…\n13 Kyle Barr     You Should Update Your iPhone to… We’re gett… 2024-09-16… http…\n14 Gizmodo Deals Apple Clears Out AirTag Stock fo… AirTags ar… 2024-10-05… http…\n15 Kyle Barr     Should You Upgrade to the iPhone… The iPhone… 2024-09-18… http…\n\n\n\n# Testing function 2\nauthor_name &lt;- c(\"Joe Tilleli\", \"Florence Ion\", \"Wes Davis\")\n\narticles2 &lt;- api_query(author_name, \"2024-10-00\", api_key)\n\nWarning: There was 1 warning in `filter()`.\nℹ In argument: `author == author_name`.\nCaused by warning in `author == author_name`:\n! longer object length is not a multiple of shorter object length\n\nprint(articles2)\n\n# A tibble: 8 × 5\n  author       title                               description publishedAt url  \n  &lt;chr&gt;        &lt;chr&gt;                               &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;\n1 Wes Davis    The next iPhone SE may lose the ho… Apple is r… 2024-10-01… http…\n2 Wes Davis    HTC announces the Vive Focus Visio… HTC’s Vive… 2024-09-18… http…\n3 Joe Tilleli  Bring the Apple iPad Mini into You… Save over … 2024-10-07… http…\n4 Joe Tilleli  Prime Day May Be Over But These Ap… Get an ind… 2024-10-10… http…\n5 Florence Ion Siri May Not Get Its Apple Intelli… The iPhone… 2024-09-23… http…\n6 Joe Tilleli  Looking for AirPods Alternatives? … Amazon has… 2024-09-19… http…\n7 Florence Ion iPhone 16 Review-in-Progress: Now … The iPhone… 2024-09-18… http…\n8 Joe Tilleli  The Prime Day Price of the Apple M… Get the 25… 2024-10-10… http…\n\n\n4) With one of your objects, summarize the name of the source for each article. That is, find a one-way contingency table for this information.\n\n# one-way contingency table\ntable(articles1$author)\n\n\nGizmodo Deals    Jay Peters     Kyle Barr \n            9             1             5 \n\n\n5) For each of your returned data objects, turn the publishedAt column into a date column using the lubridate package (see the PARSE DATE-TIMES section of the cheat sheet!). Then sort the two data frames, each by their new parsed date published column. Finally, create a new variable called pub_diff that is the difference in time between the articles’ published dates (use lag() with mutate()). Save the modifications as new data frames.\n\nlibrary(lubridate)\narticles1 &lt;- articles1 |&gt; \n  mutate(publishedAt = ymd_hms(publishedAt)) |&gt; #converting to ymd format\n  mutate(publishedAt = as.Date(publishedAt)) |&gt; #keeping only the date\n  arrange(publishedAt) |&gt; # sorting column\n  mutate(pub_diff = publishedAt - lag(publishedAt)) # difference in pub date\n\narticles2 &lt;- articles2 |&gt; \n  mutate(publishedAt = ymd_hms(publishedAt)) |&gt; #converting to ymd format\n  mutate(publishedAt = as.Date(publishedAt)) |&gt; #keeping only the date\n  arrange(publishedAt) |&gt;# sorting column\n  mutate(pub_diff = publishedAt - lag(publishedAt)) # difference in pub date\n\n6) Using both of your data frames, Subset the data frame to only return the date version of publishedAt and the pub_diff variables. Then use one call to the map() function to return the mean, standard deviation, and median of these columns. You should use a custom anonymous function using ‘shorthand’ notation ((x) …). Note that the pub_diff variable includes an NA so you’ll need to set na.rm = TRUE in the calls to mean(0, sd(), and median().\n\n# Subsetting and calculating mean, median, and sd for both publishedAt and pub_diff\narticles1_pub_summary &lt;- articles1 |&gt;\n  select(publishedAt, pub_diff) |&gt;\n  map(~ list(mean = mean(.x, na.rm = TRUE), \n             sd = sd(.x, na.rm = TRUE), \n             median = median(.x, na.rm = TRUE)))\n\narticles1_pub_summary\n\n$publishedAt\n$publishedAt$mean\n[1] \"2024-09-30\"\n\n$publishedAt$sd\n[1] 7.770518\n\n$publishedAt$median\n[1] \"2024-10-03\"\n\n\n$pub_diff\n$pub_diff$mean\nTime difference of 1.714286 days\n\n$pub_diff$sd\n[1] 1.772811\n\n$pub_diff$median\nTime difference of 1 days\n\n\n\n# Subsetting and calculating mean, median, and sd for both publishedAt and pub_diff\narticles2_pub_summary &lt;- articles2 |&gt;\n  select(publishedAt, pub_diff) |&gt;\n  map(~ list(mean = mean(.x, na.rm = TRUE), \n             sd = sd(.x, na.rm = TRUE), \n             median = median(.x, na.rm = TRUE)))\n\narticles2_pub_summary\n\n$publishedAt\n$publishedAt$mean\n[1] \"2024-09-28\"\n\n$publishedAt$sd\n[1] 9.88144\n\n$publishedAt$median\n[1] \"2024-09-27\"\n\n\n$pub_diff\n$pub_diff$mean\nTime difference of 3.142857 days\n\n$pub_diff$sd\n[1] 3.078342\n\n$pub_diff$median\nTime difference of 3 days"
  }
]